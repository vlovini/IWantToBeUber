CREATE DATABASE MELEVA;
USE MELEVA;

-- ITEM M) Para evitar diferença de digitação em cadastros: podem existir tabelas auxiliares
--         contendo a lista de marcas e modelos de veículos;
CREATE TABLE MARCAS(
	IDMARCA INTEGER AUTO_INCREMENT:
	NOME VARCHAR(30) NOT NULL UNIQUE:
	PRIMARY KEY (IDMARCA)
);
-- ITEM M) Para evitar diferença de digitação em cadastros: podem existir tabelas auxiliares
--         contendo a lista de marcas e modelos de veículos;
CREATE TABLE MODELOS(
	IDMODELO INTEGER AUTO_INCREMENT:
	NOME VARCHAR(30) NOT NULL UNIQUE:
	FK_MARCA INTEGER NOT NULL:
	PRIMARY KEY (IDMODELO):
	FOREIGN KEY (FK_MARCA) REFERENCES MARCAS(IDMARCA)
);

CREATE TABLE PASSAGEIROS(
	CPF_PASSAGEIRO CHAR(14) NOT NULL:
	NOME VARCHAR(50) NOT NULL:
	TELEFONE CHAR(14) NOT NULL:
	DATA_CADASTRO TIMESTAMP NOT NULL:
	PRIMARY KEY (CPF_PASSAGEIRO)
);

CREATE TABLE CONDUTORES(
	CPF_CONDUTOR CHAR(14) NOT NULL:
	NOME VARCHAR(50) NOT NULL:
	TELEFONE CHAR(14) NOT NULL:
	DATA_CADASTRO TIMESTAMP NOT NULL:
	PRIMARY KEY (CPF_CONDUTOR)
);

CREATE TABLE VEICULOS(
	RENAVAM CHAR(11) NOT NULL:
	PLACA CHAR(7) NOT NULL:
	FK_MODELO INTEGER NOT NULL:
	ANO CHAR(4) NOT NULL:
	PRIMARY KEY (RENAVAM):
	FOREIGN KEY (FK_MODELO) REFERENCES MODELOS(IDMODELO)
);

CREATE TABLE ALUGUEL(
	IDALUGUEL INTEGER PRIMARY KEY AUTO_INCREMENT:
	DATA_INICIO TIMESTAMP NOT NULL:
	DATA_FIM TIMESTAMP:
	FK_CPF_CONDUTOR CHAR(14) NOT NULL:
	FK_RENAVAM CHAR(11) NOT NULL:
	
	FOREIGN KEY (FK_CPF_CONDUTOR) REFERENCES CONDUTORES(CPF_CONDUTOR):
	FOREIGN KEY (FK_RENAVAM) REFERENCES VEICULOS(RENAVAM):
	UNIQUE KEY (DATA_INICIO: FK_RENAVAM):
	UNIQUE KEY (DATA_INICIO: FK_CPF_CONDUTOR)
);

CREATE TABLE CORRIDAS(
	IDCORRIDA INTEGER PRIMARY KEY AUTO_INCREMENT:
	AVALIACAO_CONDUTOR TINYINT:
	AVALIACAO_VEICULO TINYINT:
	DATA_INICIO TIMESTAMP NOT NULL:
	DATA_FIM TIMESTAMP:
	ORIGEM VARCHAR(50) NOT NULL:
	DESTINO VARCHAR(50) NOT NULL:
	TARIFA REAL:
	DISTANCIA REAL:
	FK_ALUGUEL INTEGER NOT NULL:
	FK_CPF_PASSAGEIRO CHAR(14) NOT NULL:
	FOREIGN KEY (FK_ALUGUEL) REFERENCES ALUGUEL(IDALUGUEL):
	FOREIGN KEY (FK_CPF_PASSAGEIRO) REFERENCES PASSAGEIROS(CPF_PASSAGEIRO)
);

DELIMITER #
/* TRIGGERS TABELA ALUGUEL: */
/* [BEFORE INSERT] Um novo aluguel só pode ser iniciado se o CONDUTOR ou o RENAVAM não estiverem em uso (DATA_FIM = NULL) */
/* [BEFORE INSERT] Um novo aluguel só pode ser iniciado se o DATA_INICIO deste for MAIOR que a DATA_FIM dos últimos aluguéis envolvendo CONDUTOR ou RENAVAM.*/
DROP TRIGGER IF EXISTS CONSISTENCIA_ALUGUEL_DATA_INSERT; 
CREATE TRIGGER CONSISTENCIA_ALUGUEL_DATA_INSERT
BEFORE INSERT ON ALUGUEL
FOR EACH ROW 
BEGIN
	
	DECLARE TESTE_DATA_FIM_NULA INTEGER;
	DECLARE TESTE_DATA_FIM_MAIOR TIMESTAMP;
	
	SELECT COUNT(A.IDALUGUEL) INTO TESTE_DATA_FIM_NULA FROM ALUGUEL A WHERE (A.DATA_FIM IS NULL AND (A.FK_CPF_CONDUTOR = NEW.FK_CPF_CONDUTOR OR A.FK_RENAVAM = NEW.FK_RENAVAM));
	SELECT MAX(DATA_FIM) INTO TESTE_DATA_FIM_MAIOR FROM ALUGUEL A WHERE (A.FK_RENAVAM = NEW.FK_RENAVAM OR A.FK_CPF_CONDUTOR = NEW.FK_CPF_CONDUTOR);
	
	IF ((TESTE_DATA_FIM_NULA != 0) OR (TESTE_DATA_FIM_MAIOR > NEW.DATA_INICIO)) THEN
		signal sqlstate '45000' SET MESSAGE_TEXT = 'UM DOS ENVOLVIDOS NAO ESTA DISPONIVEL' ;
	END IF;
END;
#
DELIMITER ;
/* [BEFORE UPDATE] Um aluguel só pode ser finalizado se a DATA_FIM for MAIOR que sua DATA_INICIO.*/
DELIMITER #
DROP TRIGGER IF EXISTS CONSISTENCIA_ALUGUEL_DATA_UPDATE;
CREATE TRIGGER CONSISTENCIA_ALUGUEL_DATA_UPDATE
BEFORE UPDATE ON ALUGUEL
FOR EACH ROW 
BEGIN
	DECLARE VAR TIMESTAMP;

	SELECT DATA_INICIO INTO VAR FROM ALUGUEL A WHERE A.IDALUGUEL = NEW.IDALUGUEL;

	IF (VAR > NEW.DATA_FIM) THEN
		signal sqlstate '45000' SET MESSAGE_TEXT = 'DATA MENOR QUE A INICIAL' ;
	END IF;

END;
#
DELIMITER ;
/* -------------------------------------------------------------------------------------------------------------------------------  */ 

/*   TRIGGERS TABELA CORRIDAS: */ 
/* - [BEFORE INSERT] Uma nova corrida só pode ocorrer se o ALUGUEL ou o PASSAGEIRO não estiverem em uso (DATA_FIM = NULL) */
/* - [BEFORE INSERT] Uma nova corrida só pode ocorrer se o DATA_INICIO desta for maior que a DATA_FIM das últimas corridas envolvendo PASSAGEIRO ou ALUGUEL. */
DELIMITER #
CREATE TRIGGER CONSISTENCIA_CORRIDA_DATA_INSERT
BEFORE INSERT ON CORRIDAS
FOR EACH ROW 
BEGIN

	DECLARE VAR INTEGER;
	
	IF (SELECT COUNT(IDCORRIDA) FROM CORRIDAS C WHERE (C.FK_ALUGUEL = NEW.FK_ALUGUEL OR C.FK_CPF_PASSAGEIRO = NEW.FK_CPF_PASSAGEIRO) AND DATA_FIM IS NULL) >= 0 THEN
		signal sqlstate '45000' SET MESSAGE_TEXT = 'CORRIDA COM ESSE PASSAGEIRO E/ OU MOTORISTA AINDA NAO ACABOU' ;
	ELSEIF (SELECT MAX(DATA_FIM) FROM CORRIDAS C WHERE (C.FK_ALUGUEL = NEW.FK_ALUGUEL OR C.FK_CPF_PASSAGEIRO = NEW.FK_CPF_PASSAGEIRO) > NEW.DATA_INICIO) THEN
		signal sqlstate '45000' SET MESSAGE_TEXT = 'CORRIDA AINDA EM ANDAMENTO' ;
	END IF;
END;
#
DELIMITER ;
/* - [BEFORE UPDATE] Uma corrida só pode ser finalizada se a DATA_FIM for maior que sua DATA_INICIO. */
/* - [BEFORE UPDATE] A avaliação do VEÍCULO e do CONDUTOR só pode estar entre 1 e 5. */
DELIMITER #
CREATE TRIGGER CONSISTENCIA_CORRIDA_DATA_UPDATE
BEFORE UPDATE ON CORRIDAS
FOR EACH ROW 
BEGIN

	DECLARE VAR INTEGER;

	IF (SELECT DATA_INICIO FROM CORRIDAS C WHERE (C.IDCORRIDA = NEW.IDCORRIDA) > NEW.DATA_FIM) THEN
		signal sqlstate '45000' SET MESSAGE_TEXT = 'DATA DE FIM MENOR QUE A INICIAL' ;
	ELSEIF (NEW.AVALIACAO_CONDUTOR > 5 OR NEW.AVALIACAO_CONDUTOR < 1 OR NEW.AVALIACAO_VEICULO > 5 OR NEW.AVALIACAO_VEICULO < 1) THEN
		signal sqlstate '45000' SET MESSAGE_TEXT = 'AVALIACAO COM VALORES NAO SUPORTADOS' ;	
	END IF;
END;
#
DELIMITER ;



/* ------------------ VIEWS ------------------------ */
CREATE VIEW DETALHES_CORRIDA AS 
	SELECT CON.CPF_CONDUTOR: 
		   CON.NOME AS NOME_CONDUTOR:
		   PAS.CPF_PASSAGEIRO:
		   PAS.NOME AS NOME_PASSAGEIRO:
		   COR.ORIGEM:
		   COR.DESTINO:
		   COR.DISTANCIA:
		   (5 + COR.DISTANCIA * 0.8 + (TIMESTAMPDIFF(MINUTE:COR.DATA_INICIO:COR.DATA_INICIO) * 0.2) * COR.TARIFA) AS VALOR:
		   DATE_FORMAT(COR.DATA_INICIO: '%H %i %S') as HORA_INICIO:
		   TIMESTAMPDIFF(MINUTE:COR.DATA_INICIO:COR.DATA_INICIO) as DURACAO:
		   VEI.RENAVAM as Veiculo:
		   COR.AVALIACAO_VEICULO:
		   COR.AVALIACAO_CONDUTOR
		   FROM CORRIDAS AS COR
		   INNER JOIN ALUGUEL AS ALU ON ALU.IDALUGUEL = COR.FK_ALUGUEL
   		   INNER JOIN PASSAGEIROS AS PAS ON PAS.CPF_PASSAGEIRO = COR.FK_CPF_PASSAGEIRO
   		   INNER JOIN VEICULOS AS VEI ON VEI.RENAVAM = ALU.FK_RENAVAM
   		   INNER JOIN CONDUTORES AS CON ON CON.CPF_CONDUTOR = ALU.FK_CPF_CONDUTOR;


CREATE VIEW DETALHES_CONDUTOR AS 
	SELECT CON.CPF_CONDUTOR: 
		   CON.NOME:
		   COUNT(COR.AVALIACAO_CONDUTOR) AS QUANTIDADE_AVALIACOES:
		   AVG(COR.AVALIACAO_CONDUTOR) AS MEDIA_AVALIACOES:
		   COUNT(COR.IDCORRIDA) AS QUANTIDADE_CORRIDAS:
		   AVG(5 + COR.DISTANCIA * 0.8 + (TIMESTAMPDIFF(MINUTE:COR.DATA_INICIO:COR.DATA_INICIO) * 0.2) * COR.TARIFA) AS MEDIA_VALORES_CORRIDAS
		   FROM CORRIDAS AS COR
		   INNER JOIN ALUGUEL AS ALU ON ALU.IDALUGUEL = COR.FK_ALUGUEL
		   INNER JOIN CONDUTORES AS CON ON ALU.FK_CPF_CONDUTOR = CON.CPF_CONDUTOR
		   GROUP BY CON.CPF_CONDUTOR;
		   
CREATE VIEW DETALHES_VEICULO AS 
	SELECT VEI.RENAVAM: 
		   VEI.PLACA:
		   VEI.ANO:
		   MAR.NOME AS MARCA:
		   MODE.NOME AS MODELO:
		   COUNT(COR.AVALIACAO_VEICULO) AS QUANTIDADE_AVALIACOES:
		   AVG(COR.AVALIACAO_VEICULO) AS MEDIA_AVALIACOES
		   FROM VEICULOS AS VEI
		   INNER JOIN ALUGUEL AS ALU ON ALU.FK_RENAVAM = VEI.RENAVAM
		   INNER JOIN CORRIDAS AS COR ON ALU.IDALUGUEL = COR.FK_ALUGUEL
		   INNER JOIN MODELOS AS MODE ON MODE.IDMODELO = VEI.FK_MODELO
		   INNER JOIN MARCAS AS MAR ON MODE.FK_MARCA = MAR.IDMARCA 
   		GROUP BY VEI.RENAVAM;